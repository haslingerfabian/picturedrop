/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllWorkspaces } from '../fn/workspaces/get-all-workspaces';
import { GetAllWorkspaces$Params } from '../fn/workspaces/get-all-workspaces';
import { getWorkspaceById } from '../fn/workspaces/get-workspace-by-id';
import { GetWorkspaceById$Params } from '../fn/workspaces/get-workspace-by-id';
import { Workspace } from '../models/workspace';

@Injectable({ providedIn: 'root' })
export class WorkspacesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllWorkspaces()` */
  static readonly GetAllWorkspacesPath = '/api/Workspaces';

  /**
   * Get all workspaces.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllWorkspaces()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWorkspaces$Response(params?: GetAllWorkspaces$Params, context?: HttpContext): Observable<StrictHttpResponse<Workspace>> {
    return getAllWorkspaces(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all workspaces.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllWorkspaces$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllWorkspaces(params?: GetAllWorkspaces$Params, context?: HttpContext): Observable<Workspace> {
    return this.getAllWorkspaces$Response(params, context).pipe(
      map((r: StrictHttpResponse<Workspace>): Workspace => r.body)
    );
  }

  /** Path part for operation `getWorkspaceById()` */
  static readonly GetWorkspaceByIdPath = '/api/Workspaces/{id}';

  /**
   * Get workspace by id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getWorkspaceById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkspaceById$Response(params: GetWorkspaceById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return getWorkspaceById(this.http, this.rootUrl, params, context);
  }

  /**
   * Get workspace by id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getWorkspaceById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getWorkspaceById(params: GetWorkspaceById$Params, context?: HttpContext): Observable<void> {
    return this.getWorkspaceById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
